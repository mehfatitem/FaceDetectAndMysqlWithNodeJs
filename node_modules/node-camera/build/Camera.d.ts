import { BurstOptions, Callbacks, CommandResult, CameraParams, Identificator } from "./types";
export declare class Camera {
    constructor(params: CameraParams);
    get identifyBy(): Identificator;
    private exec;
    private spawn;
    private fn;
    private readonly model;
    private readonly port;
    private _identifyBy;
    private _process;
    static listCameras: () => Promise<any>;
    stopCapture: () => void | undefined;
    set identifyBy(i: Identificator);
    burst: ({ length, filename }: BurstOptions, callbacks?: Callbacks | undefined) => void;
    captureImage: ({ bulb, filename, forceOverwrite, frames, interval, keep, keepRAW, noKeep, resetInterval, skipExisting }: Partial<{
        keep: boolean;
        keepRAW: boolean;
        noKeep: boolean;
        bulb: number;
        frames: number;
        interval: number;
        resetInterval: boolean;
        filename: string;
        forceOverwrite: boolean;
        skipExisting: boolean;
    }>, callbacks?: Callbacks | undefined) => void;
    timelapse: ({ filename, frames, interval }: Pick<Partial<{
        keep: boolean;
        keepRAW: boolean;
        noKeep: boolean;
        bulb: number;
        frames: number;
        interval: number;
        resetInterval: boolean;
        filename: string;
        forceOverwrite: boolean;
        skipExisting: boolean;
    }>, "filename" | "frames" | "interval">, callbacks?: Callbacks | undefined) => void;
    getConfig: (properties: string[]) => Promise<CommandResult>;
    setConfig: (properties: Record<string, any>) => Promise<CommandResult>;
    reset: () => Promise<CommandResult>;
    static getConfigurationTree: (port: string) => Promise<CommandResult>;
}
