"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var execCommand_1 = require("./execCommand");
var types_1 = require("./types");
// @ts-ignore
var utilities_1 = require("./utilities");
var Camera = /** @class */ (function () {
    function Camera(params) {
        var _this = this;
        this.exec = function (args) {
            !!_this._process && _this._process.kill();
            return execCommand_1.execCommand(__spreadArrays([
                _this._identifyBy === types_1.Identificator.Model
                    ? "--camera=" + _this.model
                    : "--port=" + _this.port
            ], args));
        };
        this.spawn = function (args, callbacks) {
            !!_this._process && _this._process.kill();
            return execCommand_1.spawnCommand(__spreadArrays([
                _this._identifyBy === types_1.Identificator.Model
                    ? "--camera=" + _this.model
                    : "--port=" + _this.port
            ], args), callbacks);
        };
        this.fn = function (args) { return function () { return _this.exec(args); }; };
        this.stopCapture = function () { var _a; return (_a = _this._process) === null || _a === void 0 ? void 0 : _a.kill(); };
        this.burst = function (_a, callbacks) {
            var length = _a.length, filename = _a.filename;
            var _b;
            if (_this.model.startsWith("Canon")) {
                var args = [
                    "--set-config=capturetarget=0",
                    "--set-config=drivemode=2",
                    "--set-config=eosremoterelease=2",
                    "--wait-event-and-download=" + length + "s",
                    "--set-config=eosremoterelease=4",
                    "--wait-event=1s"
                ];
                !!filename && args.push("--filename=" + filename + "%n.%C");
                _this._process = _this.spawn(args, callbacks);
            }
            else {
                ((_b = callbacks) === null || _b === void 0 ? void 0 : _b.onError) &&
                    callbacks.onError("NOT_SUPPORTED: Burst is supported on Canon cameras only.");
            }
        };
        this.captureImage = function (_a, callbacks) {
            var bulb = _a.bulb, filename = _a.filename, forceOverwrite = _a.forceOverwrite, frames = _a.frames, interval = _a.interval, keep = _a.keep, keepRAW = _a.keepRAW, noKeep = _a.noKeep, resetInterval = _a.resetInterval, skipExisting = _a.skipExisting;
            var args = [];
            !!bulb && args.push("--bulb=" + bulb);
            !!filename && args.push("--filename=" + filename);
            !!frames && args.push("--frames=" + frames);
            !!interval && args.push("--interval=" + interval);
            forceOverwrite && args.push("--force-overwrite");
            keep && args.push("--keep");
            keepRAW && args.push("--keep-raw");
            noKeep && args.push("--no-keep");
            resetInterval && args.push("--reset-interval");
            skipExisting && args.push("--skip-existing");
            _this._process = _this.spawn(__spreadArrays(["--capture-image-and-download"], args), callbacks);
        };
        this.timelapse = function (_a, callbacks) {
            var filename = _a.filename, frames = _a.frames, _b = _a.interval, interval = _b === void 0 ? 1 : _b;
            var args = [];
            !!filename && args.push("--filename=" + filename + "%n.%C");
            !!frames && args.push("--frames=" + frames);
            !!interval && args.push("--interval=" + interval);
            args.push("--force-overwrite");
            _this._process = _this.spawn(__spreadArrays(["--capture-image-and-download"], args), callbacks);
        };
        this.getConfig = function (properties) {
            return _this.exec(properties.map(function (p) { return "--get-config " + p; }));
        };
        this.setConfig = function (properties) {
            return _this.exec(Object.keys(properties).map(function (k) { return "--set-config=" + k + "=" + properties[k]; }));
        };
        this.reset = this.fn(["--reset"]);
        this.model = params.model;
        this.port = params.port;
        this._process = null;
        this._identifyBy = types_1.Identificator.Model;
    }
    Object.defineProperty(Camera.prototype, "identifyBy", {
        get: function () {
            return this._identifyBy;
        },
        set: function (i) {
            this._identifyBy = i;
        },
        enumerable: true,
        configurable: true
    });
    Camera.listCameras = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
                    var _a, data, error, _b, _, __, rest, cameras, result;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, execCommand_1.execCommand(["--auto-detect"])];
                            case 1:
                                _a = _c.sent(), data = _a.data, error = _a.error;
                                if (!!error)
                                    reject({ error: error });
                                _b = data.split("\n"), _ = _b[0], __ = _b[1], rest = _b.slice(2);
                                cameras = rest
                                    .map(function (line) { return __awaiter(void 0, void 0, void 0, function () {
                                    var _a, model, port, configuration, _b;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _a = line
                                                    .split("  ")
                                                    .filter(function (fragment) { return fragment !== ""; })
                                                    .map(function (fragment) { return (!!fragment ? fragment.trim() : fragment); }), model = _a[0], port = _a[1];
                                                if (!(!!model && !!port)) return [3 /*break*/, 2];
                                                return [4 /*yield*/, Camera.getConfigurationTree(port)];
                                            case 1:
                                                _b = (_c.sent()).data;
                                                return [3 /*break*/, 3];
                                            case 2:
                                                _b = undefined;
                                                _c.label = 3;
                                            case 3:
                                                configuration = _b;
                                                return [2 /*return*/, {
                                                        model: model,
                                                        port: port,
                                                        configuration: configuration
                                                    }];
                                        }
                                    });
                                }); });
                                return [4 /*yield*/, Promise.all(cameras)];
                            case 2:
                                result = _c.sent();
                                // @ts-ignore
                                resolve(result.filter(function (c) { return c.model && c.port; }));
                                return [2 /*return*/];
                        }
                    });
                }); })];
        });
    }); };
    Camera.getConfigurationTree = function (port) {
        return new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, data, error, props, tree, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, execCommand_1.execCommand([
                                "--port=" + port,
                                "--list-all-config"
                            ])];
                    case 1:
                        _a = _b.sent(), data = _a.data, error = _a.error;
                        if (error)
                            reject(error);
                        props = data.trim().split("END\n");
                        tree = props.reduce(function (tree, prop) {
                            if (prop === "")
                                return tree;
                            var _a = prop.trim().split("\n"), pathLine = _a[0], labelLine = _a[1], readonlyLine = _a[2], typeLine = _a[3], valueLine = _a[4], choices = _a.slice(5);
                            var propertyObj = {
                                label: labelLine.slice(7),
                                isReadonly: readonlyLine === "Readonly: 1",
                                type: typeLine.slice(6),
                                value: valueLine.slice(9),
                                options: choices.length > 0
                                    ? choices.map(function (choice) {
                                        var composite = choice.slice(8);
                                        var spacePosition = composite.indexOf(" ");
                                        return spacePosition === -1
                                            ? undefined
                                            : {
                                                label: composite.slice(spacePosition + 1),
                                                value: composite.slice(0, spacePosition)
                                            };
                                    })
                                    : undefined
                            };
                            return utilities_1.assocPath(pathLine.slice(6).split("/"), propertyObj, tree);
                        }, {});
                        resolve({ data: tree });
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        reject({ error: e_1 });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    return Camera;
}());
exports.Camera = Camera;
//# sourceMappingURL=Camera.js.map